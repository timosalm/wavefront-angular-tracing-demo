{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n/* eslint-disable no-undef */\n\n\nvar globalFetch = typeof window !== 'undefined' && window.fetch || typeof global !== 'undefined' && global.fetch; // eslint-disable-next-line global-require\n\nvar fetch = globalFetch || require('node-fetch');\n\nvar _require = require('zipkin'),\n    JSON_V1 = _require.jsonEncoder.JSON_V1;\n\nvar _require2 = require('events'),\n    EventEmitter = _require2.EventEmitter;\n\nvar defaultFetchImpl = fetch;\n\nvar HttpLogger = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(HttpLogger, _EventEmitter);\n\n  var _super = _createSuper(HttpLogger);\n  /**\n   * @constructor\n   * @param {Object} options\n   * @param {string} options.endpoint HTTP endpoint which spans will be sent\n   * @param {number} options.httpInterval How often to sync spans.\n   * @param {JsonEncoder} options.jsonEncoder JSON encoder to use when sending spans.\n   * @param {number} options.timeout Timeout for HTTP Post when sending spans.\n   * @param {number} options.maxPayloadSize Max payload size for zipkin span.\n   * @param {Object<string, string>} options.headers Additional HTTP headers to be sent with span.\n   * @param {Agent|Function} options.agent HTTP(S) agent to use for any networking related options.\n   * @param {ErrorLogger} options.log Internal error logger used within the transport.\n   * @param {(url: string, options: object) => Promise<Response>} options.fetchImplementation\n   */\n\n\n  function HttpLogger(_ref) {\n    var _this;\n\n    var endpoint = _ref.endpoint,\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        _ref$agent = _ref.agent,\n        agent = _ref$agent === void 0 ? null : _ref$agent,\n        _ref$httpInterval = _ref.httpInterval,\n        httpInterval = _ref$httpInterval === void 0 ? 1000 : _ref$httpInterval,\n        _ref$jsonEncoder = _ref.jsonEncoder,\n        jsonEncoder = _ref$jsonEncoder === void 0 ? JSON_V1 : _ref$jsonEncoder,\n        _ref$timeout = _ref.timeout,\n        timeout = _ref$timeout === void 0 ? 0 : _ref$timeout,\n        _ref$maxPayloadSize = _ref.maxPayloadSize,\n        maxPayloadSize = _ref$maxPayloadSize === void 0 ? 0 : _ref$maxPayloadSize,\n        _ref$log = _ref.log,\n        log = _ref$log === void 0 ? console : _ref$log,\n        _ref$fetchImplementat = _ref.fetchImplementation,\n        fetchImplementation = _ref$fetchImplementat === void 0 ? defaultFetchImpl : _ref$fetchImplementat;\n\n    _classCallCheck(this, HttpLogger);\n\n    _this = _super.call(this); // must be before any reference to *this*\n\n    _this.log = log;\n    _this.endpoint = endpoint;\n    _this.agent = agent;\n    _this.maxPayloadSize = maxPayloadSize;\n    _this.queue = [];\n    _this.queueBytes = 0;\n    _this.jsonEncoder = jsonEncoder;\n    _this.fetchImplementation = fetchImplementation;\n    _this.errorListenerSet = false;\n    _this.headers = Object.assign({\n      'Content-Type': 'application/json'\n    }, headers); // req/res timeout in ms, it resets on redirect. 0 to disable (OS limit applies)\n    // only supported by node-fetch; silently ignored by browser fetch clients\n    // @see https://github.com/bitinn/node-fetch#fetch-options\n\n    _this.timeout = timeout;\n    var timer = setInterval(function () {\n      _this.processQueue(_this.fetchImplementation);\n    }, httpInterval);\n\n    if (timer.unref) {\n      // unref might not be available in browsers\n      timer.unref(); // Allows Node to terminate instead of blocking on timer\n    }\n\n    return _this;\n  }\n\n  _createClass(HttpLogger, [{\n    key: \"_getPayloadSize\",\n    value: function _getPayloadSize(nextSpan) {\n      // Our payload is in format '[s1,s2,s3]', so we need to add 2 brackets and\n      // one comma separator for each payload, including the next span if defined\n      return nextSpan ? this.queueBytes + 2 + this.queue.length + nextSpan.length : this.queueBytes + 2 + Math.min(this.queue.length - 1, 0);\n    }\n  }, {\n    key: \"on\",\n    value: function on() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var eventName = args[0]; // if the instance has an error handler set then we don't need to\n      // skips error logging\n\n      if (eventName.toLowerCase() === 'error') this.errorListenerSet = true;\n\n      _get(_getPrototypeOf(HttpLogger.prototype), \"on\", this).apply(this, args);\n    }\n  }, {\n    key: \"logSpan\",\n    value: function logSpan(span) {\n      var encodedSpan = this.jsonEncoder.encode(span);\n\n      if (this.maxPayloadSize && this._getPayloadSize(encodedSpan) > this.maxPayloadSize) {\n        this.processQueue(this.fetchImplementation);\n\n        if (this._getPayloadSize(encodedSpan) > this.maxPayloadSize) {\n          // Payload size is too large even with an empty queue, we can only drop\n          var err = 'Zipkin span got dropped, reason: payload too large';\n          if (this.errorListenerSet) this.emit('error', new Error(err));else this.log.error(err);\n          return;\n        }\n      }\n\n      this.queue.push(encodedSpan);\n      this.queueBytes += encodedSpan.length;\n    } // We need to receive the fetch implementation as argument to avoid the\n    // lose of context when compiling this with webpack and babel. See this\n    // PR for more details https://github.com/openzipkin/zipkin-js/pull/497\n\n  }, {\n    key: \"processQueue\",\n    value: function processQueue(fetchImpl) {\n      var _this2 = this;\n\n      var self = this;\n\n      if (self.queue.length > 0) {\n        var postBody = \"[\".concat(self.queue.join(','), \"]\");\n        var fetchOptions = {\n          method: 'POST',\n          body: postBody,\n          headers: self.headers,\n          timeout: self.timeout,\n          agent: self.agent\n        };\n        fetchImpl(self.endpoint, fetchOptions).then(function (response) {\n          if (response.status !== 202 && response.status !== 200) {\n            var err = 'Unexpected response while sending Zipkin data, status:' + \"\".concat(response.status, \", body: \").concat(postBody);\n            if (self.errorListenerSet) _this2.emit('error', new Error(err));else _this2.log.error(err);\n          } else {\n            _this2.emit('success', response);\n          }\n        })[\"catch\"](function (error) {\n          var err = \"Error sending Zipkin data \".concat(error);\n          if (self.errorListenerSet) _this2.emit('error', new Error(err));else _this2.log.error(err);\n        });\n        self.queue.length = 0;\n        self.queueBytes = 0;\n      }\n    }\n  }]);\n\n  return HttpLogger;\n}(EventEmitter);\n\nmodule.exports = HttpLogger;","map":null,"metadata":{},"sourceType":"script"}