{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as zipkin from 'zipkin';\nimport * as zipkinTransportHttp from 'zipkin-transport-http';\nimport * as i0 from \"@angular/core\";\nexport let ZipkinHttpInterceptor = /*#__PURE__*/(() => {\n  class ZipkinHttpInterceptor {\n    constructor() {\n      const localServiceName = 'wavefront-angular-tracing-demo-ui';\n      const remoteServiceName = 'wavefront-angular-tracing-demo-api';\n      this.tracer = new zipkin.Tracer({\n        ctxImpl: new zipkin.ExplicitContext(),\n        recorder: new zipkin.BatchRecorder({\n          logger: new zipkinTransportHttp.HttpLogger({\n            endpoint: 'http://localhost:9411/api/v2/spans',\n            jsonEncoder: zipkin.jsonEncoder.JSON_V2\n          })\n        }),\n        localServiceName: localServiceName,\n        traceId128Bit: true\n      });\n      this.instrumentation = new zipkin.Instrumentation.HttpClient({\n        tracer: this.tracer,\n        serviceName: localServiceName,\n        remoteServiceName: remoteServiceName\n      });\n    }\n\n    intercept(request, next) {\n      return new Observable(observer => {\n        this.tracer.scoped(() => {\n          const options = this.instrumentation.recordRequest({\n            url: request.url,\n            headers: {}\n          }, request.url, request.method || 'GET');\n          request = request.clone({\n            setHeaders: options.headers\n          });\n          const traceId = this.tracer.id;\n          next.handle(request).pipe(tap(event => {\n            if (event instanceof HttpResponse) {\n              this.tracer.scoped(() => {\n                if (event.ok) {\n                  this.instrumentation.recordResponse(traceId, event.status.toString());\n                } else {\n                  this.instrumentation.recordError(traceId, new Error('status ' + event.status));\n                }\n              });\n            }\n          })).subscribe(event => observer.next(event));\n        });\n      });\n    }\n\n  }\n\n  ZipkinHttpInterceptor.ɵfac = function ZipkinHttpInterceptor_Factory(t) {\n    return new (t || ZipkinHttpInterceptor)();\n  };\n\n  ZipkinHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ZipkinHttpInterceptor,\n    factory: ZipkinHttpInterceptor.ɵfac\n  });\n  return ZipkinHttpInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}